//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")
    
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Avenir-Book`.
    static let avenirBook = Rswift.FontResource(fontName: "Avenir-Book")
    /// Font `Avenir-Light`.
    static let avenirLight = Rswift.FontResource(fontName: "Avenir-Light")
    /// Font `Avenir-Roman`.
    static let avenirRoman = Rswift.FontResource(fontName: "Avenir-Roman")
    
    /// `UIFont(name: "Avenir-Book", size: ...)`
    static func avenirBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirBook, size: size)
    }
    
    /// `UIFont(name: "Avenir-Light", size: ...)`
    static func avenirLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirLight, size: size)
    }
    
    /// `UIFont(name: "Avenir-Roman", size: ...)`
    static func avenirRoman(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirRoman, size: size)
    }
    
    static func validate() throws {
      if R.font.avenirBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Avenir-Book' could not be loaded, is 'Avenir-Book.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Avenir-Light' could not be loaded, is 'Avenir-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirRoman(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Avenir-Roman' could not be loaded, is 'Avenir-Roman.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 60 images.
  struct image {
    /// Image `Background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Background")
    /// Image `Brand Name`.
    static let brandName = Rswift.ImageResource(bundle: R.hostingBundle, name: "Brand Name")
    /// Image `Done Button`.
    static let doneButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Done Button")
    /// Image `Dotted Line`.
    static let dottedLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dotted Line")
    /// Image `Go To Hom Button`.
    static let goToHomButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Go To Hom Button")
    /// Image `Grey Button`.
    static let greyButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Grey Button")
    /// Image `HeaderBanner`.
    static let headerBanner = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeaderBanner")
    /// Image `King Button`.
    static let kingButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "King Button")
    /// Image `Running Button`.
    static let runningButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Running Button")
    /// Image `Settings Button`.
    static let settingsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings Button")
    /// Image `Slab Button`.
    static let slabButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slab Button")
    /// Image `alarm_selected`.
    static let alarm_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm_selected")
    /// Image `alarm`.
    static let alarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm")
    /// Image `back2`.
    static let back2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back2")
    /// Image `backk`.
    static let backk = Rswift.ImageResource(bundle: R.hostingBundle, name: "backk")
    /// Image `bottle_body`.
    static let bottle_body = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottle_body")
    /// Image `bottle_head`.
    static let bottle_head = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottle_head")
    /// Image `bouder2`.
    static let bouder2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bouder2")
    /// Image `dottedline`.
    static let dottedline = Rswift.ImageResource(bundle: R.hostingBundle, name: "dottedline")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `editdisable`.
    static let editdisable = Rswift.ImageResource(bundle: R.hostingBundle, name: "editdisable")
    /// Image `femalebuttonblack`.
    static let femalebuttonblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "femalebuttonblack")
    /// Image `femalebuttonblue`.
    static let femalebuttonblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "femalebuttonblue")
    /// Image `footer_help`.
    static let footer_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "footer_help")
    /// Image `footer_history`.
    static let footer_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "footer_history")
    /// Image `footer_star`.
    static let footer_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "footer_star")
    /// Image `footer`.
    static let footer = Rswift.ImageResource(bundle: R.hostingBundle, name: "footer")
    /// Image `footernew`.
    static let footernew = Rswift.ImageResource(bundle: R.hostingBundle, name: "footernew")
    /// Image `graph`.
    static let graph = Rswift.ImageResource(bundle: R.hostingBundle, name: "graph")
    /// Image `graphblue`.
    static let graphblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "graphblue")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `historyblue`.
    static let historyblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "historyblue")
    /// Image `home1`.
    static let home1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home1")
    /// Image `homeblue`.
    static let homeblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeblue")
    /// Image `homeimg`.
    static let homeimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeimg")
    /// Image `ios21`.
    static let ios21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ios21")
    /// Image `lbs Button`.
    static let lbsButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "lbs Button")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `malebuttonblack`.
    static let malebuttonblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "malebuttonblack")
    /// Image `malebuttonblue`.
    static let malebuttonblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "malebuttonblue")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `menuiconnew`.
    static let menuiconnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuiconnew")
    /// Image `personal`.
    static let personal = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal")
    /// Image `rateandreview`.
    static let rateandreview = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateandreview")
    /// Image `refresh`.
    static let refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh")
    /// Image `round1`.
    static let round1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "round1")
    /// Image `runningbuttonblack`.
    static let runningbuttonblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "runningbuttonblack")
    /// Image `runningbuttonblue`.
    static let runningbuttonblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "runningbuttonblue")
    /// Image `settingblue`.
    static let settingblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingblue")
    /// Image `shoppingcartblack`.
    static let shoppingcartblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "shoppingcartblack")
    /// Image `shoppingcartblue`.
    static let shoppingcartblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "shoppingcartblue")
    /// Image `splashscreen`.
    static let splashscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashscreen")
    /// Image `standingbuttonblack`.
    static let standingbuttonblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "standingbuttonblack")
    /// Image `standingbuttonblue`.
    static let standingbuttonblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "standingbuttonblue")
    /// Image `statistics.PNG (1)`.
    static let statisticsPNG1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "statistics.PNG (1)")
    /// Image `toboudernew`.
    static let toboudernew = Rswift.ImageResource(bundle: R.hostingBundle, name: "toboudernew")
    /// Image `walkingbuttonblack`.
    static let walkingbuttonblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkingbuttonblack")
    /// Image `walkingbuttonblue`.
    static let walkingbuttonblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkingbuttonblue")
    /// Image `waterDrop`.
    static let waterDrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "waterDrop")
    
    /// `UIImage(named: "Background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Brand Name", bundle: ..., traitCollection: ...)`
    static func brandName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brandName, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Done Button", bundle: ..., traitCollection: ...)`
    static func doneButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doneButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Dotted Line", bundle: ..., traitCollection: ...)`
    static func dottedLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dottedLine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Go To Hom Button", bundle: ..., traitCollection: ...)`
    static func goToHomButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goToHomButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Grey Button", bundle: ..., traitCollection: ...)`
    static func greyButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HeaderBanner", bundle: ..., traitCollection: ...)`
    static func headerBanner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headerBanner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "King Button", bundle: ..., traitCollection: ...)`
    static func kingButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kingButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Running Button", bundle: ..., traitCollection: ...)`
    static func runningButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.runningButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Settings Button", bundle: ..., traitCollection: ...)`
    static func settingsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Slab Button", bundle: ..., traitCollection: ...)`
    static func slabButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slabButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alarm", bundle: ..., traitCollection: ...)`
    static func alarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alarm_selected", bundle: ..., traitCollection: ...)`
    static func alarm_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back2", bundle: ..., traitCollection: ...)`
    static func back2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backk", bundle: ..., traitCollection: ...)`
    static func backk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backk, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottle_body", bundle: ..., traitCollection: ...)`
    static func bottle_body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottle_body, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottle_head", bundle: ..., traitCollection: ...)`
    static func bottle_head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottle_head, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bouder2", bundle: ..., traitCollection: ...)`
    static func bouder2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bouder2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dottedline", bundle: ..., traitCollection: ...)`
    static func dottedline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dottedline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editdisable", bundle: ..., traitCollection: ...)`
    static func editdisable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editdisable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "femalebuttonblack", bundle: ..., traitCollection: ...)`
    static func femalebuttonblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.femalebuttonblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "femalebuttonblue", bundle: ..., traitCollection: ...)`
    static func femalebuttonblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.femalebuttonblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footer", bundle: ..., traitCollection: ...)`
    static func footer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footer_help", bundle: ..., traitCollection: ...)`
    static func footer_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footer_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footer_history", bundle: ..., traitCollection: ...)`
    static func footer_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footer_history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footer_star", bundle: ..., traitCollection: ...)`
    static func footer_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footer_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "footernew", bundle: ..., traitCollection: ...)`
    static func footernew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.footernew, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "graph", bundle: ..., traitCollection: ...)`
    static func graph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graph, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "graphblue", bundle: ..., traitCollection: ...)`
    static func graphblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.graphblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "historyblue", bundle: ..., traitCollection: ...)`
    static func historyblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home1", bundle: ..., traitCollection: ...)`
    static func home1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeblue", bundle: ..., traitCollection: ...)`
    static func homeblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeimg", bundle: ..., traitCollection: ...)`
    static func homeimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ios21", bundle: ..., traitCollection: ...)`
    static func ios21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ios21, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lbs Button", bundle: ..., traitCollection: ...)`
    static func lbsButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lbsButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "malebuttonblack", bundle: ..., traitCollection: ...)`
    static func malebuttonblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malebuttonblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "malebuttonblue", bundle: ..., traitCollection: ...)`
    static func malebuttonblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.malebuttonblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuiconnew", bundle: ..., traitCollection: ...)`
    static func menuiconnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuiconnew, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal", bundle: ..., traitCollection: ...)`
    static func personal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rateandreview", bundle: ..., traitCollection: ...)`
    static func rateandreview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateandreview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "refresh", bundle: ..., traitCollection: ...)`
    static func refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "round1", bundle: ..., traitCollection: ...)`
    static func round1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "runningbuttonblack", bundle: ..., traitCollection: ...)`
    static func runningbuttonblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.runningbuttonblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "runningbuttonblue", bundle: ..., traitCollection: ...)`
    static func runningbuttonblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.runningbuttonblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settingblue", bundle: ..., traitCollection: ...)`
    static func settingblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shoppingcartblack", bundle: ..., traitCollection: ...)`
    static func shoppingcartblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingcartblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shoppingcartblue", bundle: ..., traitCollection: ...)`
    static func shoppingcartblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingcartblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashscreen", bundle: ..., traitCollection: ...)`
    static func splashscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashscreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "standingbuttonblack", bundle: ..., traitCollection: ...)`
    static func standingbuttonblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standingbuttonblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "standingbuttonblue", bundle: ..., traitCollection: ...)`
    static func standingbuttonblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standingbuttonblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "statistics.PNG (1)", bundle: ..., traitCollection: ...)`
    static func statisticsPNG1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statisticsPNG1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toboudernew", bundle: ..., traitCollection: ...)`
    static func toboudernew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toboudernew, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkingbuttonblack", bundle: ..., traitCollection: ...)`
    static func walkingbuttonblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkingbuttonblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkingbuttonblue", bundle: ..., traitCollection: ...)`
    static func walkingbuttonblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkingbuttonblue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "waterDrop", bundle: ..., traitCollection: ...)`
    static func waterDrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waterDrop, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `alertCell`.
    static let alertCell: Rswift.ReuseIdentifier<alertCell> = Rswift.ReuseIdentifier(identifier: "alertCell")
    /// Reuse identifier `cell1`.
    static let cell1: Rswift.ReuseIdentifier<menucell> = Rswift.ReuseIdentifier(identifier: "cell1")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Value: Click here to reset today’s intake.
      static let homeTutorialFourthStep = Rswift.StringResource(key: "home.tutorial.fourth-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Once you’ve drank… Tap ‘Hydrate’ and the water level will update automatically.
      static let homeTutorialThirdStep = Rswift.StringResource(key: "home.tutorial.third-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select your Activity level
      static let personalInfoTutorialThirdStep = Rswift.StringResource(key: "personal-info.tutorial.third-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select your Gender
      static let personalInfoTutorialSecondStep = Rswift.StringResource(key: "personal-info.tutorial.second-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This is your suggested daily water intake
      static let personalInfoTutorialFourthStep = Rswift.StringResource(key: "personal-info.tutorial.fourth-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To work out your daily water intake goal please Select Your Weight
      static let personalInfoTutorialFirstStep = Rswift.StringResource(key: "personal-info.tutorial.first-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Water level 1: This shows you how full the bottle is.
      static let homeTutorialFirstStep = Rswift.StringResource(key: "home.tutorial.first-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Water level 2: This shows you where you need to drink to.
      static let homeTutorialSecondStep = Rswift.StringResource(key: "home.tutorial.second-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You’re Done! Fill up your bottle and lets get started!
      static let homeTutorialFifthStep = Rswift.StringResource(key: "home.tutorial.fifth-step", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Click here to reset today’s intake.
      static func homeTutorialFourthStep(_: Void = ()) -> String {
        return NSLocalizedString("home.tutorial.fourth-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Once you’ve drank… Tap ‘Hydrate’ and the water level will update automatically.
      static func homeTutorialThirdStep(_: Void = ()) -> String {
        return NSLocalizedString("home.tutorial.third-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Select your Activity level
      static func personalInfoTutorialThirdStep(_: Void = ()) -> String {
        return NSLocalizedString("personal-info.tutorial.third-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Select your Gender
      static func personalInfoTutorialSecondStep(_: Void = ()) -> String {
        return NSLocalizedString("personal-info.tutorial.second-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: This is your suggested daily water intake
      static func personalInfoTutorialFourthStep(_: Void = ()) -> String {
        return NSLocalizedString("personal-info.tutorial.fourth-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: To work out your daily water intake goal please Select Your Weight
      static func personalInfoTutorialFirstStep(_: Void = ()) -> String {
        return NSLocalizedString("personal-info.tutorial.first-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Water level 1: This shows you how full the bottle is.
      static func homeTutorialFirstStep(_: Void = ()) -> String {
        return NSLocalizedString("home.tutorial.first-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Water level 2: This shows you where you need to drink to.
      static func homeTutorialSecondStep(_: Void = ()) -> String {
        return NSLocalizedString("home.tutorial.second-step", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You’re Done! Fill up your bottle and lets get started!
      static func homeTutorialFifthStep(_: Void = ()) -> String {
        return NSLocalizedString("home.tutorial.fifth-step", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splashscreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashscreen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let alertVCNew = StoryboardViewControllerResource<AlertVCNew>(identifier: "AlertVCNew")
      let bundle = R.hostingBundle
      let historyDetail = StoryboardViewControllerResource<HistoryDetail>(identifier: "HistoryDetail")
      let historyVC = StoryboardViewControllerResource<HistoryVC>(identifier: "HistoryVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let menuVC = StoryboardViewControllerResource<MenuVC>(identifier: "MenuVC")
      let myStatisticVC = StoryboardViewControllerResource<MyStatisticVC>(identifier: "MyStatisticVC")
      let name = "Main"
      let personalInfoVC = StoryboardViewControllerResource<PersonalInfoVC>(identifier: "PersonalInfoVC")
      
      func alertVCNew(_: Void = ()) -> AlertVCNew? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alertVCNew)
      }
      
      func historyDetail(_: Void = ()) -> HistoryDetail? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyDetail)
      }
      
      func historyVC(_: Void = ()) -> HistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyVC)
      }
      
      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }
      
      func menuVC(_: Void = ()) -> MenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuVC)
      }
      
      func myStatisticVC(_: Void = ()) -> MyStatisticVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myStatisticVC)
      }
      
      func personalInfoVC(_: Void = ()) -> PersonalInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: personalInfoVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Background' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Brand Name", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Brand Name' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Dotted Line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Dotted Line' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Slab Button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Slab Button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backk", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backk' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottle_body", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottle_body' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottle_head", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottle_head' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "femalebuttonblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'femalebuttonblack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "footer_help", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footer_help' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "footer_history", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footer_history' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "footer_star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footer_star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "footernew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'footernew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "malebuttonblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'malebuttonblack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menuiconnew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menuiconnew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'refresh' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "runningbuttonblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'runningbuttonblack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "standingbuttonblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'standingbuttonblack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "statistics.PNG (1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'statistics.PNG (1)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "walkingbuttonblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'walkingbuttonblack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "waterDrop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'waterDrop' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().alertVCNew() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alertVCNew' could not be loaded from storyboard 'Main' as 'AlertVCNew'.") }
        if _R.storyboard.main().historyDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyDetail' could not be loaded from storyboard 'Main' as 'HistoryDetail'.") }
        if _R.storyboard.main().historyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyVC' could not be loaded from storyboard 'Main' as 'HistoryVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().menuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuVC' could not be loaded from storyboard 'Main' as 'MenuVC'.") }
        if _R.storyboard.main().myStatisticVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myStatisticVC' could not be loaded from storyboard 'Main' as 'MyStatisticVC'.") }
        if _R.storyboard.main().personalInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'personalInfoVC' could not be loaded from storyboard 'Main' as 'PersonalInfoVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
